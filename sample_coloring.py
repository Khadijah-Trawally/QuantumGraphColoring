# -*- coding: utf-8 -*-
"""graph _cororing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtCx0W0rLDLmrchfKXnyH5lpK2QkL6uQ
"""

import time
import os

import numpy as np

import matplotlib.pyplot as plt
from scipy.linalg import eigh
import networkx as nx

def tensor_product(Mat1, Mat2):
    """
    Compute the tensor product of two matrices.

    Parameters:
        Mat1 (array): First matrix.
        Mat2 (array): Second matrix.

    Returns:
        array: Tensor product of the input matrices.
    """
    return np.kron(Mat1, Mat2)

def identity_matrix(N):
    """
    Generate an identity matrix of size 2^N.

    Parameters:
        N (int): Size of the identity matrix.

    Returns:
        array: Identity matrix of size 2^N.
    """
    return np.eye(2**N)

def diag_hamiltonian(H):
    """
    Diagonalize a given Hamiltonian matrix.

    Parameters:
        H (array): Hamiltonian matrix.

    Returns:
        array: Eigenvalues of the Hamiltonian.
        array: Eigenvectors of the Hamiltonian.
    """
    eig_val, eig_vec = eigh(H)  # Using eigh for Hermitian matrices
    return eig_val, eig_vec

def ising_hamiltonian(N, sigmaz):
    """
    Construct the Ising Hamiltonian for a given number of spins.

    Parameters:
        N (int): Number of spins.
        sigmaz (array): Pauli-Z matrix.

    Returns:
        array: Ising Hamiltonian matrix.
    """
    ham = np.zeros((2**N, 2**N), dtype=complex)
    for i in range(1, N):
        ham += tensor_product(tensor_product(tensor_product(identity_matrix(i-1),
                                                            sigmaz), sigmaz),
                              identity_matrix(N-i-1))
    return ham



def visualize_graph_with_colors(graph_edges, ground_state_solution):
    """
    Visualize a graph with nodes colored based on a given ground state solution.

    Parameters:
        graph_edges (list): List of tuples representing edges of the graph.
        ground_state_solution (array): Array representing the ground state solution obtained from the Ising Hamiltonian.

    Returns:
        None (displays the plot).
    """
    # Define the graph
    G = nx.Graph()
    G.add_edges_from(graph_edges)

    # Initialize color map
    color_map = {}

    # Map solution values (0s and 1s) to colors
    for node, solution_value in zip(G.nodes, ground_state_solution):
        if solution_value == 0:
            color_map[node] = 'blue'
        else:
            color_map[node] = 'red'
    # Draw the graph with node colors
    nx.draw(G, with_labels=True, node_color=list(color_map.values()), node_size=700, edge_color='k', linewidths=1, font_size=10)



# Parameters
num_nodes = 2
num_colors = 2

J = 1  # Coupling strength
sigmaz = np.array([[1, 0], [0, -1]], dtype=complex)  # Pauli-Z matrix

graph_edges = [(ii, ii+1) for ii in range(1, num_nodes)]

# Calculate the Ising Hamiltonian
H = J * ising_hamiltonian(num_nodes, sigmaz)

# Diagonalize the Hamiltonian to find the ground state
eig_val, eig_vec = diag_hamiltonian(H)
print(f'eigenvalues: {eig_val}')

# Find the indices of the smallest eigenvalues (ground states)
ground_state_indices = np.where(eig_val == min(eig_val))[0]

# Extract the ground state eigenvectors
ground_states = eig_vec[:, ground_state_indices]

# Compute the linear combination
ground_states_solution = np.sum(ground_states, axis=1)


#draw_graph(graph_edges, ground_states_solution, num_colors)

visualize_graph_with_colors(graph_edges, ground_states_solution)

